// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

// It passes provided `MemoryTest`, but the implementation still might have some issues
// it would need to be checked register by register in the VM emulator

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {
    static Array memory;
    static int heapBase;
    static int heapSize;

    // inline on way linked list
    static int freeList; // pointer to the head segment
    static int freeListLength; // length of the segment, value at `freeList` pointer
    static int freeListNext;   // pointer to the next segment in the linked list

    /** Initializes the class. */
    function void init() {
        let memory = 0; // RAM[0]
        let heapBase = 2048; // just after SP
        let heapSize = 16384 - heapBase; // 16K RAM device - static stack size

        let freeList = heapBase;
        let freeListLength = heapSize;
        let freeListNext = 0;

        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return memory[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let memory[address] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
        var int head, length, next, prev, block;
        var int remainingSize;

        let head = freeList;
        let length = freeListLength;
        let next = freeListLength;
        let prev = 0;

        // first-fit heuristic
        while ( ~(next = 0) & (length < (size + 2)) ) {
            let prev = head;
            let head = next;
            let length = Memory.peek(head);
            let next = Memory.peek(head+1);
        }

        if (length < (size + 2)) {
            return -1; // no segment found
        }

        let remainingSize = length - size + 1;

        do Memory.poke(head, remainingSize);

        if ((remainingSize = 2) | (remainingSize < 2)) {
            // set prev's `next` to null
            do Memory.poke(prev + 1, 0);
        }

        let block = head + 3; // skip over: segment's length, next pointer and block pointer
        do Memory.poke(block - 1, size); // set block[-1] to block size

        return block;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        var int head, length, next;

        let head = freeList;
        let length = freeListLength;
        let next = freeListLength;

        while (~(next = 0)) {
            let head = next;
            let length = Memory.peek(head);
            let next = Memory.peek(head+1);
        }

        // create and append a new ll block
        let next = o[0];
        let o[0] = o[-1];
        let o[1] = 0;

        return;
    }    
}
