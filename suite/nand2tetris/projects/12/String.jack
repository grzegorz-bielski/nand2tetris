// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field int maxStrLength;
    field int currentLength;
    field Array chars;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        let maxStrLength = maxLength;
        let currentLength = 0;

        if (maxLength > 0) {
            let chars = Array.new(maxLength);
        } else {
            let chars = Array.new(1);
        }

        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        do Memory.deAlloc(this);
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return currentLength;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return chars[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let chars[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        if (maxStrLength = currentLength) {
            return this;
        }

        let chars[currentLength] = c;
        let currentLength = currentLength + 1;

        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        if (currentLength = 0) {
            return;
        }

        let currentLength = currentLength - 1;

        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var int val, i, factor;

        let val = 0;

        if (charAt(0) = String.minusSign()) {
            // minus sign, multiply by -1 and skip the firt char
            let i = 1;
            let factor = -1;
        } else {
            let i = 0;
            let factor = 1;
        }

        while(i < currentLength) {
            // assumes string[0] is the most significant digit
            let val = (val * 10) + String.charToSingleDigit(charAt(i)); 
            let i = i + 1;
        }

        return val * factor;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        var int lastDigit, i, dval;
        var Array temp;
        var char c;

        // we are iterating from last to first char and storing results in `temp` acc
        let temp = Array.new(maxStrLength);
        let i = 0;
        let dval = Math.abs(val);
        let currentLength = 0; // reset string size

        while((dval > 0) | (i=0)) {
            // take last digit of the decimal representation,
            let lastDigit = String.modulo(dval, 10); // dval % 10
            let c = String.singleDigitToChar(lastDigit);

            let temp[i] = c;
            let i = i + 1;
            
            let dval = dval / 10; // take integer representation only
        }

        if (val < 0) {
            let temp[i] = String.minusSign();
            let i = i + 1;
        }

        // append in reverse order
        while(i > 0) {
            do appendChar(temp[i-1]);
            let i = i - 1;
        }

        do temp.dispose();

        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }

    function char minusSign() {
        return 45;
    }

    // 49 -> "0"
    // 57 -> "9"
    function char singleDigitToChar(int val) {
        return val + 48;
    }

    function int charToSingleDigit(char val) {
        return val - 48;
    }

    // should rather be a part of Math.jack
    // It's here for testing String.jack in isolation
    function int modulo(int dividend, int divisor) {
        var int quotient;

        if (divisor = 0) {
            return -1; // err - division by zero
        }

        let quotient = dividend / divisor;

        return dividend - (quotient * divisor);
    }
}
