// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 512 rows (indexed 0..511, top to bottom)
 * of 256 pixels each (indexed 0..255, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {
    // true  - black
    // false - white
    static boolean currentColor; 
    static int SCREEN;

    /** Initializes the Screen. */
    function void init() {
        let currentColor = true;
        let SCREEN = 16384;

        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        var int i;

        let i = 0;
        while (i < 8192) { // 256 rows * 32 pixels/row = 8192 pixels
            let SCREEN[i] = 0; // white pixel
            let i = i + 1;
        }

        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let currentColor = b;

        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int chunk, chunkAddress, mask, i, xClamped;

        let chunkAddress = SCREEN + (y * 32) + (x / 16);
        let chunk = Memory.peek(chunkAddress);

        // ensures that x is between 0 and 15, so you're only setting bits within a 16-bit word. 
        //   1010  (x)
        // & 1111  (15)
        // = 1010  (n & 15 = 10)

        //   1010  (x)
        // & 1111  (15)
        // = 1010  (x & 15 = 10)

        //   11111  (x)
        // & 01111  (15)
        // = 01111  (x & 15 = 15)

        let xClamped = x & 15; 

        // inefficient, but there is no << operator support in Hack VM
        let mask = 1;
        let i = 0;
        while (i < xClamped) {
            let mask = mask * 2;
            let i = i + 1;
        }

        if(currentColor) { // black
            // 0000001 mask

            // 0100100 chunk
            // 0000001 mask
            // ----- |
            // 0100101

            do Memory.poke(chunkAddress, chunk | mask);
        }
        else { // white
            // 0000100 mask

            // 0100100 chunk
            // 1111011 ~mask
            // ----- &
            // 0100000

            do Memory.poke(chunkAddress, chunk & ~mask);
        }


        return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        // Bresenham's line
        var int dx, dy, sx, sy, err, e2;

        let dx = Math.abs(x2 - x1);
        let dy = Math.abs(y2 - y1);
        let err = dx - dy;

        // x direction
        if (x1 < x2) {
            let sx = 1; // moves right
        } else {
            let sx = -1; // moves left
        }

        // y direction
        if (y1 < y2) {
            let sy = 1; // moves up
        } else {
            let sy = -1; // moves down
        }

        // ~( (x1 = x2) & (y1 = y2))

        while(~( (x1 = x2) & (y1 = y2))) {
            do Screen.drawPixel(x1,y1);
            let e2 = 2 * err;

            if (e2 > -dy) {
                let err = err - dy;
                let x1 = x1 + sx;
            }

            if (e2 < dx) {
                let err = err + dx;
                let y1 = y1 + sy;
            }
        }

        return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        var int dy;

        let dy = y1;
        while(dy < y2) {    
            do Screen.drawLine(x1, dy, x2, dy);
            let dy = dy + 1;
        }
        do Screen.drawLine(x1, y2, x2, y2);
        
        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        return;
    }
}
